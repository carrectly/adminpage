
pipeline {
         agent any
         environment{
             APP = "adminpage"
             IMAGE_TAG = "${env.BUILD_NUMBER}"
             PROJECT_ID = 'adminpage-chicago'
             CLUSTER_NAME = 'cluster-test-adminpage'
             LOCATION = 'us-central1-c'
             CREDENTIALS_ID = 'gke'
             registry = "pavlohortovenko20/adminpage2.1:${env.BUILD_NUMBER}"
             registryCredential ='dockerhub_cred'
             gitgetvers ='git rev-parse --short  HEAD'
             kubernetesSetVersion ='kubectl set image deployment/adminpage-deployment adminpage2.1:latest=adminpage2.1:latest:${gitgetvers} --record'
             checkContainer='docker images -f ""'
             image_tag='latest'
             purge='curl -X POST "https://api.cloudflare.com/client/v4/user/tokens/verify" \
                     -H "Authorization: Bearer mCA9q-VMXNyIrfQfVlGXADVIA5iDk_iMPzB77aD5" \
                     -H "Content-Type:application/json"'
            }
         stages {
                 stage('Checout') {
                 steps {
                     checkout([$class: 'GitSCM', branches: [[name: '*/develop']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/carrectly/adminpage.git']]])
                        }
                     }   
                 stage('Build') {
                 steps  {
                     script {
                        sh 'echo GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID >> .env'
                        sh 'echo GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET >> .env'
                        sh 'echo GOOGLE_CALLBACK=$GOOGLE_CALLBACK_TEST >> .env'
                        sh 'echo GOOGLE_REFRESH_TOKEN=$GOOGLE_REFRESH_TOKEN >> .env'
                        sh 'echo DOMAIN=$DOMAIN_TEST >> .env'
                        sh 'echo squareApplicationId=$squareApplicationId_dev >> .env'
                        sh 'echo SQUARE_TOKEN=$SQUARE_TOKEN_DEV >> .env'
                        sh 'echo squareBasePath=$squareBasePath_dev >> .env'
                        sh 'echo SQUARE_LOCATION_ID=$SQUARE_LOCATION_ID_DEV >> .env'
                        sh 'echo SQUARE_ENVIRONMENT=$SQUARE_ENVIRONMENT_DEV >> .env'
                        sh 'echo CORPORATE_EMAIL=$CORPORATE_EMAIL >> .env'
                        sh 'echo travisApiToken=$travisApiToken >> .env'
                        sh 'echo DB_URL=$DB_URL_TEST >> .env '
                        dockerImage=docker.build registry 
                        }
                    }
                 }
                 stage('Push image to registry') {
                 steps {
                     script{ 
                          docker.withRegistry( '', registryCredential ) {
                          dockerImage.push("${env.BUILD_NUMBER}")
                            }
                        }
                    }
                }
                stage('Remove older images') {
                 steps {
                         sh 'docker rmi $(docker images -q)'
                        }
                }
                stage('Set image by k8s') {
                    steps {
                        sh "sed -i.bak 's|<imageTag>|${registry}|' ./adminpage-deploy.yaml"
                    }
                }
                stage('Deploy to GKE') { 
                 steps { 
                    step([
                    $class: 'KubernetesEngineBuilder',
                    projectId: env.PROJECT_ID,
                    clusterName: env.CLUSTER_NAME,
                    location: env.LOCATION,
                    manifestPattern: 'adminpage-deploy.yaml',
                    credentialsId: env.CREDENTIALS_ID,
                    verifyDeployments: true])
                    }
                }
                stage('purge clear') {
                  steps {
                      sh 'curl -X POST "https://api.cloudflare.com/client/v4/zones/023e105f4ecef8ad9ca31a8372d0c353/purge_cache" \
                          -H "X-Auth-Email: Taras@carrectly.com" \
                          -H "X-Auth-Key: mCA9q-VMXNyIrfQfVlGXADVIA5iDk_iMPzB77aD5" \
                          -H "Content-Type: application/json" \
                          --data '{"purge_everything": true}'
                          '
                        }
                    }
                }
            }
